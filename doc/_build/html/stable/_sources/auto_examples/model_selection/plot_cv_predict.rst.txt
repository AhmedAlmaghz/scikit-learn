
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/model_selection/plot_cv_predict.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_model_selection_plot_cv_predict.py>`
        to download the full example code. or to run this example in your browser via JupyterLite or Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_model_selection_plot_cv_predict.py:


====================================
رسم تنبؤات الصندوق الأسود
====================================

هذا المثال يوضح كيفية استخدام
:func:`~sklearn.model_selection.cross_val_predict` مع
:class:`~sklearn.metrics.PredictionErrorDisplay` لتصور أخطاء التنبؤ.

.. GENERATED FROM PYTHON SOURCE LINES 10-14

.. code-block:: Python


    # المؤلفون: مطوري سكايلرن
    # معرف الترخيص: BSD-3-Clause








.. GENERATED FROM PYTHON SOURCE LINES 15-16

سنقوم بتحميل مجموعة بيانات مرض السكري وإنشاء مثيل لنموذج الانحدار الخطي.

.. GENERATED FROM PYTHON SOURCE LINES 16-22

.. code-block:: Python

    from sklearn.datasets import load_diabetes
    from sklearn.linear_model import LinearRegression

    X, y = load_diabetes(return_X_y=True)
    lr = LinearRegression()








.. GENERATED FROM PYTHON SOURCE LINES 23-24

:func:`~sklearn.model_selection.cross_val_predict` يعيد مصفوفة بنفس حجم `y` حيث كل إدخال هو تنبؤ تم الحصول عليه من خلال الصندوق الأسود.

.. GENERATED FROM PYTHON SOURCE LINES 24-28

.. code-block:: Python

    from sklearn.model_selection import cross_val_predict

    y_pred = cross_val_predict(lr, X, y, cv=10)








.. GENERATED FROM PYTHON SOURCE LINES 29-31

بما أن `cv=10`، فهذا يعني أننا قمنا بتدريب 10 نماذج وتم استخدام كل نموذج للتنبؤ على واحدة من الطيات العشر. يمكننا الآن استخدام
:class:`~sklearn.metrics.PredictionErrorDisplay` لتصور أخطاء التنبؤ.

.. GENERATED FROM PYTHON SOURCE LINES 31-62

.. code-block:: Python


    # على المحور الأيسر، نرسم القيم الملاحظة :math:`y` مقابل القيم المتوقعة
    # :math:`\hat{y}` التي تعطيها النماذج. على المحور الأيمن، نرسم
    # المتبقيات (أي الفرق بين القيم الملاحظة والقيم المتوقعة) مقابل القيم المتوقعة.
    import matplotlib.pyplot as plt

    from sklearn.metrics import PredictionErrorDisplay

    fig, axs = plt.subplots(ncols=2, figsize=(8, 4))
    PredictionErrorDisplay.from_predictions(
        y,
        y_pred=y_pred,
        kind="actual_vs_predicted",
        subsample=100,
        ax=axs[0],
        random_state=0,
    )
    axs[0].set_title("القيم الفعلية مقابل القيم المتوقعة")
    PredictionErrorDisplay.from_predictions(
        y,
        y_pred=y_pred,
        kind="residual_vs_predicted",
        subsample=100,
        ax=axs[1],
        random_state=0,
    )
    axs[1].set_title("المتبقيات مقابل القيم المتوقعة")
    fig.suptitle("رسم تنبؤات الصندوق الأسود")
    plt.tight_layout()
    plt.show()




.. image-sg:: /auto_examples/model_selection/images/sphx_glr_plot_cv_predict_001.png
   :alt: رسم تنبؤات الصندوق الأسود, القيم الفعلية مقابل القيم المتوقعة, المتبقيات مقابل القيم المتوقعة
   :srcset: /auto_examples/model_selection/images/sphx_glr_plot_cv_predict_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 63-65

من المهم ملاحظة أننا استخدمنا
:func:`~sklearn.model_selection.cross_val_predict` لأغراض العرض فقط في هذا المثال.

.. GENERATED FROM PYTHON SOURCE LINES 65-72

.. code-block:: Python


    # سيكون من المشكلات تقييم أداء النموذج بشكل كمي من خلال حساب مقياس أداء واحد من التنبؤات المجمعة التي تم إرجاعها بواسطة
    # :func:`~sklearn.model_selection.cross_val_predict`
    # عندما تختلف الطيات المختلفة للصندوق الأسود في الحجم والتوزيعات.

    # يوصى بحساب مقاييس أداء لكل طية باستخدام:
    # :func:`~sklearn.model_selection.cross_val_score` أو
    # :func:`~sklearn.model_selection.cross_validate` بدلاً من ذلك.







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.246 seconds)


.. _sphx_glr_download_auto_examples_model_selection_plot_cv_predict.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/model_selection/plot_cv_predict.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: lite-badge

      .. image:: images/jupyterlite_badge_logo.svg
        :target: ../../lite/lab/index.html?path=auto_examples/model_selection/plot_cv_predict.ipynb
        :alt: Launch JupyterLite
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_cv_predict.ipynb <plot_cv_predict.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_cv_predict.py <plot_cv_predict.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_cv_predict.zip <plot_cv_predict.zip>`


.. include:: plot_cv_predict.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
