
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/miscellaneous/plot_partial_dependence_visualization_api.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_miscellaneous_plot_partial_dependence_visualization_api.py>`
        to download the full example code. or to run this example in your browser via JupyterLite or Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_miscellaneous_plot_partial_dependence_visualization_api.py:


============================================
الرسم المتقدم باستخدام الاعتمادية الجزئية
============================================
يمكن استخدام كائن :class:`~sklearn.inspection.PartialDependenceDisplay` للرسم دون الحاجة إلى إعادة حساب الاعتمادية الجزئية. في هذا المثال، نوضح كيفية رسم مخططات الاعتمادية الجزئية وكيفية تخصيص المخطط بسرعة باستخدام واجهة برمجة التطبيقات (API) للتصور.

.. note::

    راجع أيضًا :ref:`sphx_glr_auto_examples_miscellaneous_plot_roc_curve_visualization_api.py`

.. GENERATED FROM PYTHON SOURCE LINES 11-25

.. code-block:: Python


    # المؤلفون: مطوري scikit-learn
    # معرف SPDX-License: BSD-3-Clause

    import matplotlib.pyplot as plt
    import pandas as pd

    from sklearn.datasets import load_diabetes
    from sklearn.inspection import PartialDependenceDisplay
    from sklearn.neural_network import MLPRegressor
    from sklearn.pipeline import make_pipeline
    from sklearn.preprocessing import StandardScaler
    from sklearn.tree import DecisionTreeRegressor








.. GENERATED FROM PYTHON SOURCE LINES 26-30

تدريب النماذج على مجموعة بيانات مرض السكري
================================================

أولاً، نقوم بتدريب شجرة قرار وشبكة عصبية متعددة الطبقات على مجموعة بيانات مرض السكري.

.. GENERATED FROM PYTHON SOURCE LINES 30-43

.. code-block:: Python


    diabetes = load_diabetes()
    X = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)
    y = diabetes.target

    tree = DecisionTreeRegressor()
    mlp = make_pipeline(
        StandardScaler(),
        MLPRegressor(hidden_layer_sizes=(100, 100), tol=1e-2, max_iter=500, random_state=0),
    )
    tree.fit(X, y)
    mlp.fit(X, y)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /project/workspace/sklearn/neural_network/_multilayer_perceptron.py:691: ConvergenceWarning:

    Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.



.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-26 {
      /* Definition of color scheme common for light and dark mode */
      --sklearn-color-text: #000;
      --sklearn-color-text-muted: #666;
      --sklearn-color-line: gray;
      /* Definition of color scheme for unfitted estimators */
      --sklearn-color-unfitted-level-0: #fff5e6;
      --sklearn-color-unfitted-level-1: #f6e4d2;
      --sklearn-color-unfitted-level-2: #ffe0b3;
      --sklearn-color-unfitted-level-3: chocolate;
      /* Definition of color scheme for fitted estimators */
      --sklearn-color-fitted-level-0: #f0f8ff;
      --sklearn-color-fitted-level-1: #d4ebff;
      --sklearn-color-fitted-level-2: #b3dbfd;
      --sklearn-color-fitted-level-3: cornflowerblue;

      /* Specific color for light theme */
      --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
      --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-icon: #696969;

      @media (prefers-color-scheme: dark) {
        /* Redefinition of color scheme for dark theme */
        --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
        --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-icon: #878787;
      }
    }

    #sk-container-id-26 {
      color: var(--sklearn-color-text);
    }

    #sk-container-id-26 pre {
      padding: 0;
    }

    #sk-container-id-26 input.sk-hidden--visually {
      border: 0;
      clip: rect(1px 1px 1px 1px);
      clip: rect(1px, 1px, 1px, 1px);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }

    #sk-container-id-26 div.sk-dashed-wrapped {
      border: 1px dashed var(--sklearn-color-line);
      margin: 0 0.4em 0.5em 0.4em;
      box-sizing: border-box;
      padding-bottom: 0.4em;
      background-color: var(--sklearn-color-background);
    }

    #sk-container-id-26 div.sk-container {
      /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
         but bootstrap.min.css set `[hidden] { display: none !important; }`
         so we also need the `!important` here to be able to override the
         default hidden behavior on the sphinx rendered scikit-learn.org.
         See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
      display: inline-block !important;
      position: relative;
    }

    #sk-container-id-26 div.sk-text-repr-fallback {
      display: none;
    }

    div.sk-parallel-item,
    div.sk-serial,
    div.sk-item {
      /* draw centered vertical line to link estimators */
      background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
      background-size: 2px 100%;
      background-repeat: no-repeat;
      background-position: center center;
    }

    /* Parallel-specific style estimator block */

    #sk-container-id-26 div.sk-parallel-item::after {
      content: "";
      width: 100%;
      border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
      flex-grow: 1;
    }

    #sk-container-id-26 div.sk-parallel {
      display: flex;
      align-items: stretch;
      justify-content: center;
      background-color: var(--sklearn-color-background);
      position: relative;
    }

    #sk-container-id-26 div.sk-parallel-item {
      display: flex;
      flex-direction: column;
    }

    #sk-container-id-26 div.sk-parallel-item:first-child::after {
      align-self: flex-end;
      width: 50%;
    }

    #sk-container-id-26 div.sk-parallel-item:last-child::after {
      align-self: flex-start;
      width: 50%;
    }

    #sk-container-id-26 div.sk-parallel-item:only-child::after {
      width: 0;
    }

    /* Serial-specific style estimator block */

    #sk-container-id-26 div.sk-serial {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: var(--sklearn-color-background);
      padding-right: 1em;
      padding-left: 1em;
    }


    /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
    clickable and can be expanded/collapsed.
    - Pipeline and ColumnTransformer use this feature and define the default style
    - Estimators will overwrite some part of the style using the `sk-estimator` class
    */

    /* Pipeline and ColumnTransformer style (default) */

    #sk-container-id-26 div.sk-toggleable {
      /* Default theme specific background. It is overwritten whether we have a
      specific estimator or a Pipeline/ColumnTransformer */
      background-color: var(--sklearn-color-background);
    }

    /* Toggleable label */
    #sk-container-id-26 label.sk-toggleable__label {
      cursor: pointer;
      display: flex;
      width: 100%;
      margin-bottom: 0;
      padding: 0.5em;
      box-sizing: border-box;
      text-align: center;
      align-items: start;
      justify-content: space-between;
      gap: 0.5em;
    }

    #sk-container-id-26 label.sk-toggleable__label .caption {
      font-size: 0.6rem;
      font-weight: lighter;
      color: var(--sklearn-color-text-muted);
    }

    #sk-container-id-26 label.sk-toggleable__label-arrow:before {
      /* Arrow on the left of the label */
      content: "▸";
      float: left;
      margin-right: 0.25em;
      color: var(--sklearn-color-icon);
    }

    #sk-container-id-26 label.sk-toggleable__label-arrow:hover:before {
      color: var(--sklearn-color-text);
    }

    /* Toggleable content - dropdown */

    #sk-container-id-26 div.sk-toggleable__content {
      max-height: 0;
      max-width: 0;
      overflow: hidden;
      text-align: left;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-26 div.sk-toggleable__content.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-26 div.sk-toggleable__content pre {
      margin: 0.2em;
      border-radius: 0.25em;
      color: var(--sklearn-color-text);
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-26 div.sk-toggleable__content.fitted pre {
      /* unfitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-26 input.sk-toggleable__control:checked~div.sk-toggleable__content {
      /* Expand drop-down */
      max-height: 200px;
      max-width: 100%;
      overflow: auto;
    }

    #sk-container-id-26 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
      content: "▾";
    }

    /* Pipeline/ColumnTransformer-specific style */

    #sk-container-id-26 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-26 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator-specific style */

    /* Colorize estimator box */
    #sk-container-id-26 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-26 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    #sk-container-id-26 div.sk-label label.sk-toggleable__label,
    #sk-container-id-26 div.sk-label label {
      /* The background is the default theme color */
      color: var(--sklearn-color-text-on-default-background);
    }

    /* On hover, darken the color of the background */
    #sk-container-id-26 div.sk-label:hover label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    /* Label box, darken color on hover, fitted */
    #sk-container-id-26 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator label */

    #sk-container-id-26 div.sk-label label {
      font-family: monospace;
      font-weight: bold;
      display: inline-block;
      line-height: 1.2em;
    }

    #sk-container-id-26 div.sk-label-container {
      text-align: center;
    }

    /* Estimator-specific */
    #sk-container-id-26 div.sk-estimator {
      font-family: monospace;
      border: 1px dotted var(--sklearn-color-border-box);
      border-radius: 0.25em;
      box-sizing: border-box;
      margin-bottom: 0.5em;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-26 div.sk-estimator.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    /* on hover */
    #sk-container-id-26 div.sk-estimator:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-26 div.sk-estimator.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Specification for estimator info (e.g. "i" and "?") */

    /* Common style for "i" and "?" */

    .sk-estimator-doc-link,
    a:link.sk-estimator-doc-link,
    a:visited.sk-estimator-doc-link {
      float: right;
      font-size: smaller;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1em;
      height: 1em;
      width: 1em;
      text-decoration: none !important;
      margin-left: 0.5em;
      text-align: center;
      /* unfitted */
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
      color: var(--sklearn-color-unfitted-level-1);
    }

    .sk-estimator-doc-link.fitted,
    a:link.sk-estimator-doc-link.fitted,
    a:visited.sk-estimator-doc-link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    div.sk-estimator:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover,
    div.sk-label-container:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover,
    div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    /* Span, style for the box shown on hovering the info icon */
    .sk-estimator-doc-link span {
      display: none;
      z-index: 9999;
      position: relative;
      font-weight: normal;
      right: .2ex;
      padding: .5ex;
      margin: .5ex;
      width: min-content;
      min-width: 20ex;
      max-width: 50ex;
      color: var(--sklearn-color-text);
      box-shadow: 2pt 2pt 4pt #999;
      /* unfitted */
      background: var(--sklearn-color-unfitted-level-0);
      border: .5pt solid var(--sklearn-color-unfitted-level-3);
    }

    .sk-estimator-doc-link.fitted span {
      /* fitted */
      background: var(--sklearn-color-fitted-level-0);
      border: var(--sklearn-color-fitted-level-3);
    }

    .sk-estimator-doc-link:hover span {
      display: block;
    }

    /* "?"-specific style due to the `<a>` HTML tag */

    #sk-container-id-26 a.estimator_doc_link {
      float: right;
      font-size: 1rem;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1rem;
      height: 1rem;
      width: 1rem;
      text-decoration: none;
      /* unfitted */
      color: var(--sklearn-color-unfitted-level-1);
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
    }

    #sk-container-id-26 a.estimator_doc_link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    #sk-container-id-26 a.estimator_doc_link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    #sk-container-id-26 a.estimator_doc_link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
    }
    </style><div id="sk-container-id-26" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),
                    (&#x27;mlpregressor&#x27;,
                     MLPRegressor(hidden_layer_sizes=(100, 100), max_iter=500,
                                  random_state=0, tol=0.01))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item sk-dashed-wrapped"><div class="sk-label-container"><div class="sk-label fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-74" type="checkbox" ><label for="sk-estimator-id-74" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>Pipeline</div></div><div><a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/dev/modules/generated/sklearn.pipeline.Pipeline.html">?<span>Documentation for Pipeline</span></a><span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></div></label><div class="sk-toggleable__content fitted"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),
                    (&#x27;mlpregressor&#x27;,
                     MLPRegressor(hidden_layer_sizes=(100, 100), max_iter=500,
                                  random_state=0, tol=0.01))])</pre></div> </div></div><div class="sk-serial"><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-75" type="checkbox" ><label for="sk-estimator-id-75" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>StandardScaler</div></div><div><a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/dev/modules/generated/sklearn.preprocessing.StandardScaler.html">?<span>Documentation for StandardScaler</span></a></div></label><div class="sk-toggleable__content fitted"><pre>StandardScaler()</pre></div> </div></div><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-76" type="checkbox" ><label for="sk-estimator-id-76" class="sk-toggleable__label fitted sk-toggleable__label-arrow"><div><div>MLPRegressor</div></div><div><a class="sk-estimator-doc-link fitted" rel="noreferrer" target="_blank" href="https://scikit-learn.org/dev/modules/generated/sklearn.neural_network.MLPRegressor.html">?<span>Documentation for MLPRegressor</span></a></div></label><div class="sk-toggleable__content fitted"><pre>MLPRegressor(hidden_layer_sizes=(100, 100), max_iter=500, random_state=0,
                 tol=0.01)</pre></div> </div></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 44-51

رسم الاعتمادية الجزئية لميزتين
============================================

نرسم منحنيات الاعتمادية الجزئية للميزتين "العمر" و"مؤشر كتلة الجسم" لشجرة القرار. مع ميزتين،
:func:`~sklearn.inspection.PartialDependenceDisplay.from_estimator` يتوقع رسم
منحنيين. هنا تقوم دالة الرسم بوضع شبكة من مخططين باستخدام المساحة
المحددة بواسطة `ax` .

.. GENERATED FROM PYTHON SOURCE LINES 51-55

.. code-block:: Python

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.set_title("Decision Tree")
    tree_disp = PartialDependenceDisplay.from_estimator(tree, X, ["age", "bmi"], ax=ax)




.. image-sg:: /auto_examples/miscellaneous/images/sphx_glr_plot_partial_dependence_visualization_api_001.png
   :alt: Decision Tree
   :srcset: /auto_examples/miscellaneous/images/sphx_glr_plot_partial_dependence_visualization_api_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 56-60

يمكن رسم منحنيات الاعتمادية الجزئية للشبكة العصبية متعددة الطبقات.
في هذه الحالة، يتم تمرير `line_kw` إلى
:func:`~sklearn.inspection.PartialDependenceDisplay.from_estimator` لتغيير
لون المنحنى.

.. GENERATED FROM PYTHON SOURCE LINES 60-66

.. code-block:: Python

    fig, ax = plt.subplots(figsize=(12, 6))
    ax.set_title("Multi-layer Perceptron")
    mlp_disp = PartialDependenceDisplay.from_estimator(
        mlp, X, ["age", "bmi"], ax=ax, line_kw={"color": "red"}
    )




.. image-sg:: /auto_examples/miscellaneous/images/sphx_glr_plot_partial_dependence_visualization_api_002.png
   :alt: Multi-layer Perceptron
   :srcset: /auto_examples/miscellaneous/images/sphx_glr_plot_partial_dependence_visualization_api_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 67-80

رسم الاعتمادية الجزئية للنموذجين معًا
======================================================

تحتوي كائنات `tree_disp` و`mlp_disp`
:class:`~sklearn.inspection.PartialDependenceDisplay` على جميع المعلومات المحسوبة اللازمة لإعادة إنشاء منحنيات الاعتمادية الجزئية. هذا
يعني أنه يمكننا بسهولة إنشاء مخططات إضافية دون الحاجة إلى إعادة حساب
المنحنيات.

إحدى طرق رسم المنحنيات هي وضعها في نفس الشكل، مع
منحنيات كل نموذج في كل صف. أولاً، نقوم بإنشاء شكل مع محورين
داخل صفين وعمود واحد. يتم تمرير المحورين إلى
:func:`~sklearn.inspection.PartialDependenceDisplay.plot` وظائف `tree_disp` و`mlp_disp`. سيتم استخدام المحاور المعطاة بواسطة دالة الرسم لرسم الاعتمادية الجزئية. يضع المخطط الناتج منحنيات الاعتمادية الجزئية لشجرة القرار في الصف الأول من
الشبكة العصبية متعددة الطبقات في الصف الثاني.

.. GENERATED FROM PYTHON SOURCE LINES 80-87

.. code-block:: Python


    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 10))
    tree_disp.plot(ax=ax1)
    ax1.set_title("Decision Tree")
    mlp_disp.plot(ax=ax2, line_kw={"color": "red"})
    ax2.set_title("Multi-layer Perceptron")




.. image-sg:: /auto_examples/miscellaneous/images/sphx_glr_plot_partial_dependence_visualization_api_003.png
   :alt: Decision Tree, Multi-layer Perceptron
   :srcset: /auto_examples/miscellaneous/images/sphx_glr_plot_partial_dependence_visualization_api_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(0.5, 1.0, 'Multi-layer Perceptron')



.. GENERATED FROM PYTHON SOURCE LINES 88-93

طريقة أخرى لمقارنة المنحنيات هي رسمها فوق بعضها البعض. هنا،
نقوم بإنشاء شكل مع صف واحد وعمودين. يتم تمرير المحاور إلى
:func:`~sklearn.inspection.PartialDependenceDisplay.plot` الدالة كقائمة،
والتي سترسم منحنيات الاعتمادية الجزئية لكل نموذج على نفس المحاور.
يجب أن يكون طول قائمة المحاور مساويًا لعدد المخططات المرسومة.

.. GENERATED FROM PYTHON SOURCE LINES 93-102

.. code-block:: Python


    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 6))
    tree_disp.plot(ax=[ax1, ax2], line_kw={"label": "Decision Tree"})
    mlp_disp.plot(
        ax=[ax1, ax2], line_kw={"label": "Multi-layer Perceptron", "color": "red"}
    )
    ax1.legend()
    ax2.legend()




.. image-sg:: /auto_examples/miscellaneous/images/sphx_glr_plot_partial_dependence_visualization_api_004.png
   :alt: plot partial dependence visualization api
   :srcset: /auto_examples/miscellaneous/images/sphx_glr_plot_partial_dependence_visualization_api_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fe49c608130>



.. GENERATED FROM PYTHON SOURCE LINES 104-110

`tree_disp.axes_` هو حاوية مصفوفة numpy للمحاور المستخدمة لرسم
مخططات الاعتمادية الجزئية. يمكن تمرير هذا إلى `mlp_disp` للحصول على نفس
تأثير رسم المخططات فوق بعضها البعض. علاوة على ذلك، فإن
`mlp_disp.figure_` يحفظ الشكل، مما يسمح بتغيير حجم الشكل
بعد استدعاء `plot`. في هذه الحالة، يكون لـ `tree_disp.axes_` بعدين، وبالتالي
لن تعرض الدالة `plot` سوى تسمية المحور y وعلامات المحور y على المخطط الأيسر.

.. GENERATED FROM PYTHON SOURCE LINES 110-120

.. code-block:: Python


    tree_disp.plot(line_kw={"label": "Decision Tree"})
    mlp_disp.plot(
        line_kw={"label": "Multi-layer Perceptron", "color": "red"}, ax=tree_disp.axes_
    )
    tree_disp.figure_.set_size_inches(10, 6)
    tree_disp.axes_[0, 0].legend()
    tree_disp.axes_[0, 1].legend()
    plt.show()




.. image-sg:: /auto_examples/miscellaneous/images/sphx_glr_plot_partial_dependence_visualization_api_005.png
   :alt: plot partial dependence visualization api
   :srcset: /auto_examples/miscellaneous/images/sphx_glr_plot_partial_dependence_visualization_api_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 121-126

رسم الاعتمادية الجزئية لميزة واحدة
===========================================

هنا، نرسم منحنيات الاعتمادية الجزئية لميزة واحدة، "العمر"، على
نفس المحاور. في هذه الحالة، يتم تمرير `tree_disp.axes_` إلى دالة الرسم الثانية.

.. GENERATED FROM PYTHON SOURCE LINES 126-129

.. code-block:: Python

    tree_disp = PartialDependenceDisplay.from_estimator(tree, X, ["age"])
    mlp_disp = PartialDependenceDisplay.from_estimator(
        mlp, X, ["age"], ax=tree_disp.axes_, line_kw={"color": "red"}
    )


.. image-sg:: /auto_examples/miscellaneous/images/sphx_glr_plot_partial_dependence_visualization_api_006.png
   :alt: plot partial dependence visualization api
   :srcset: /auto_examples/miscellaneous/images/sphx_glr_plot_partial_dependence_visualization_api_006.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.025 seconds)


.. _sphx_glr_download_auto_examples_miscellaneous_plot_partial_dependence_visualization_api.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/miscellaneous/plot_partial_dependence_visualization_api.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: lite-badge

      .. image:: images/jupyterlite_badge_logo.svg
        :target: ../../lite/lab/index.html?path=auto_examples/miscellaneous/plot_partial_dependence_visualization_api.ipynb
        :alt: Launch JupyterLite
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_partial_dependence_visualization_api.ipynb <plot_partial_dependence_visualization_api.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_partial_dependence_visualization_api.py <plot_partial_dependence_visualization_api.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_partial_dependence_visualization_api.zip <plot_partial_dependence_visualization_api.zip>`


.. include:: plot_partial_dependence_visualization_api.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
