
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_semi_supervised_plot_semi_supervised_versus_svm_iris.py>`
        to download the full example code. or to run this example in your browser via JupyterLite or Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_semi_supervised_plot_semi_supervised_versus_svm_iris.py:


===============================================================================
حدود القرار للمصنفات شبه المُشرفة مقابل SVM على مجموعة بيانات Iris
===============================================================================

مقارنة لحدود القرار المولدة على مجموعة بيانات Iris
بواسطة Label Spreading وSelf-training وSVM.

هذا المثال يوضح أن Label Spreading وSelf-training يمكنهما تعلم
حدود جيدة حتى مع كميات صغيرة من البيانات المُعَلَّمة.

ملاحظة: تم إهمال Self-training مع 100% من البيانات لأنها متطابقة وظيفياً
مع تدريب SVC على 100% من البيانات.

.. GENERATED FROM PYTHON SOURCE LINES 16-87



.. image-sg:: /auto_examples/semi_supervised/images/sphx_glr_plot_semi_supervised_versus_svm_iris_001.png
   :alt: Unlabeled points are colored white, Label Spreading 30% data, Self-training 30% data, Label Spreading 50% data, Self-training 50% data, Label Spreading 100% data, SVC with rbf kernel
   :srcset: /auto_examples/semi_supervised/images/sphx_glr_plot_semi_supervised_versus_svm_iris_001.png
   :class: sphx-glr-single-img





.. code-block:: Python


    # المؤلفون: مطوري scikit-learn
    # معرف الترخيص: BSD-3-Clause

    import matplotlib.pyplot as plt
    import numpy as np

    from sklearn import datasets
    from sklearn.semi_supervised import LabelSpreading, SelfTrainingClassifier
    from sklearn.svm import SVC

    iris = datasets.load_iris()

    X = iris.data[:, :2]
    y = iris.target

    # حجم الخطوة في الشبكة
    h = 0.02

    rng = np.random.RandomState(0)
    y_rand = rng.rand(y.shape[0])
    y_30 = np.copy(y)
    y_30[y_rand < 0.3] = -1  # تعيين عينات عشوائية لتكون غير مُعَلَّمة
    y_50 = np.copy(y)
    y_50[y_rand < 0.5] = -1
    # ننشئ مثالاً لـ SVM ونقوم بتدريبه على البيانات. لا نقوم بضبط البيانات لأننا نريد رسم المتجهات الداعمة
    ls30 = (LabelSpreading().fit(X, y_30), y_30, "Label Spreading 30% data")
    ls50 = (LabelSpreading().fit(X, y_50), y_50, "Label Spreading 50% data")
    ls100 = (LabelSpreading().fit(X, y), y, "Label Spreading 100% data")

    # المصنف الأساسي لـ self-training مطابق لـ SVC
    base_classifier = SVC(kernel="rbf", gamma=0.5, probability=True)
    st30 = (
        SelfTrainingClassifier(base_classifier).fit(X, y_30),
        y_30,
        "Self-training 30% data",
    )
    st50 = (
        SelfTrainingClassifier(base_classifier).fit(X, y_50),
        y_50,
        "Self-training 50% data",
    )

    rbf_svc = (SVC(kernel="rbf", gamma=0.5).fit(X, y), y, "SVC with rbf kernel")

    # إنشاء شبكة لرسمها
    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))

    color_map = {-1: (1, 1, 1), 0: (0, 0, 0.9), 1: (1, 0, 0), 2: (0.8, 0.6, 0)}

    classifiers = (ls30, st30, ls50, st50, ls100, rbf_svc)
    for i, (clf, y_train, title) in enumerate(classifiers):
        # رسم حدود القرار. لهذا، سنقوم بتعيين لون لكل نقطة
        # في الشبكة [x_min, x_max]x[y_min, y_max].
        plt.subplot(3, 2, i + 1)
        Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])

        # وضع النتيجة في رسم ملون
        Z = Z.reshape(xx.shape)
        plt.contourf(xx, yy, Z, cmap=plt.cm.Paired)
        plt.axis("off")

        # رسم نقاط التدريب أيضاً
        colors = [color_map[y] for y in y_train]
        plt.scatter(X[:, 0], X[:, 1], c=colors, edgecolors="black")

        plt.title(title)

    plt.suptitle("Unlabeled points are colored white", y=0.1)
    plt.show()

.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.269 seconds)


.. _sphx_glr_download_auto_examples_semi_supervised_plot_semi_supervised_versus_svm_iris.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: binder-badge

      .. image:: images/binder_badge_logo.svg
        :target: https://mybinder.org/v2/gh/scikit-learn/scikit-learn/main?urlpath=lab/tree/notebooks/auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.ipynb
        :alt: Launch binder
        :width: 150 px

    .. container:: lite-badge

      .. image:: images/jupyterlite_badge_logo.svg
        :target: ../../lite/lab/index.html?path=auto_examples/semi_supervised/plot_semi_supervised_versus_svm_iris.ipynb
        :alt: Launch JupyterLite
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_semi_supervised_versus_svm_iris.ipynb <plot_semi_supervised_versus_svm_iris.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_semi_supervised_versus_svm_iris.py <plot_semi_supervised_versus_svm_iris.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_semi_supervised_versus_svm_iris.zip <plot_semi_supervised_versus_svm_iris.zip>`


.. include:: plot_semi_supervised_versus_svm_iris.recommendations


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
